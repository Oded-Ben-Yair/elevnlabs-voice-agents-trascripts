name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:

env:
  TRIVY_VERSION: '0.48.0'
  GRYPE_VERSION: '0.74.1'

jobs:
  trivy-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        exit-code: '1'
        ignore-unfixed: true
        vuln-type: 'os,library'

    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy for Docker images
      run: |
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update && sudo apt-get install trivy

        # Scan backend Dockerfile
        trivy config backend/Dockerfile --severity HIGH,CRITICAL --exit-code 1

        # Scan frontend Dockerfile
        trivy config frontend/Dockerfile --severity HIGH,CRITICAL --exit-code 1

    - name: Run Trivy for IaC scanning
      run: |
        trivy config terraform/ --severity HIGH,CRITICAL
        trivy config k8s/ --severity HIGH,CRITICAL

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality

    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{ matrix.language }}"

  dependency-scanning:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Run Safety check for Python dependencies
      working-directory: ./backend
      run: |
        pip install safety
        safety check --json --output safety-report.json

    - name: Upload Safety results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: safety-report
        path: backend/safety-report.json

    - name: Run npm audit
      working-directory: ./frontend
      run: |
        npm audit --json > npm-audit.json || true
        npm audit --audit-level=high

    - name: Upload npm audit results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: npm-audit-report
        path: frontend/npm-audit.json

    - name: Run Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --all-projects

  secrets-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Detect secrets with TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sast-scan:
    name: SAST with Semgrep
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Run Semgrep
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/python
          p/javascript
          p/typescript
          p/react
          p/owasp-top-ten
        generateSarif: true

    - name: Upload SARIF results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: semgrep.sarif

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build test images
      run: |
        docker build -t backend-test:latest ./backend
        docker build -t frontend-test:latest ./frontend

    - name: Run Grype vulnerability scan
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        grype backend-test:latest -o sarif > backend-grype.sarif
        grype frontend-test:latest -o sarif > frontend-grype.sarif

    - name: Upload Grype results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: backend-grype.sarif

    - name: Run Syft SBOM generation
      run: |
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        syft backend-test:latest -o spdx-json > backend-sbom.json
        syft frontend-test:latest -o spdx-json > frontend-sbom.json

    - name: Upload SBOM artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sbom-reports
        path: |
          backend-sbom.json
          frontend-sbom.json

  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check Python licenses
      working-directory: ./backend
      run: |
        pip install pip-licenses
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --fail-on="GPL,LGPL,AGPL"

    - name: Check Node licenses
      working-directory: ./frontend
      run: |
        npx license-checker --json > licenses.json
        npx license-checker --onlyAllow "MIT;Apache-2.0;BSD-3-Clause;BSD-2-Clause;ISC;CC0-1.0"

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [trivy-scan, codeql-analysis, dependency-scanning, secrets-scanning, sast-scan, container-scan]
    if: always()

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate consolidated report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Date: $(date)" >> security-report.md
        echo "Commit: ${{ github.sha }}" >> security-report.md
        echo "" >> security-report.md

        echo "## Scan Results Summary" >> security-report.md
        echo "- Trivy Scan: ${{ needs.trivy-scan.result }}" >> security-report.md
        echo "- CodeQL Analysis: ${{ needs.codeql-analysis.result }}" >> security-report.md
        echo "- Dependency Scanning: ${{ needs.dependency-scanning.result }}" >> security-report.md
        echo "- Secret Detection: ${{ needs.secrets-scanning.result }}" >> security-report.md
        echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md

    - name: Create issue if critical vulnerabilities found
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Security vulnerabilities detected in ${context.sha.substring(0, 7)}`,
            body: `Critical security vulnerabilities were detected in commit ${context.sha}.

            Please review the security scan results and address the issues immediately.

            Workflow run: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            labels: ['security', 'critical']
          });
          console.log(`Created issue #${issue.data.number}`);