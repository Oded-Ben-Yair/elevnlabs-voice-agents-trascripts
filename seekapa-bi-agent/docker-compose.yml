version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: seekapa-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://seekapa_admin:S33kpDB2025@postgres:5432/seekapa_bi
      - REDIS_URL=redis://redis:6379
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_AI_SERVICES_ENDPOINT=${AZURE_AI_SERVICES_ENDPOINT}
      - GPT5_DEPLOYMENT=${GPT5_DEPLOYMENT}
      - POWERBI_TENANT_ID=${POWERBI_TENANT_ID}
      - POWERBI_CLIENT_ID=${POWERBI_CLIENT_ID}
      - POWERBI_CLIENT_SECRET=${POWERBI_CLIENT_SECRET}
      - POWERBI_WORKSPACE_ID=${POWERBI_WORKSPACE_ID}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - seekapa-network
    volumes:
      - ./logs:/app/logs

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: seekapa-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - REACT_APP_API_URL=http://backend:8000
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - seekapa-network

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: seekapa-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=seekapa_admin
      - POSTGRES_PASSWORD=S33kpDB2025
      - POSTGRES_DB=seekapa_bi
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U seekapa_admin -d seekapa_bi"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - seekapa-network

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: seekapa-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - seekapa-network

  # Nginx Load Balancer (for multiple backend instances)
  nginx:
    image: nginx:alpine
    container_name: seekapa-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - seekapa-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: seekapa-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - seekapa-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: seekapa-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - seekapa-network

networks:
  seekapa-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local